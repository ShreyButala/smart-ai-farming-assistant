<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>SMART AI FARMING ASSISTANT — TECHTIDE</title>
  
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
  
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">

  <style>
    :root {
      --primary-orange: #FF9933; /* Saffron Orange */
      --secondary-green: #138808; /* Green accent */
      --light-bg: #fdfdfd;
      --border-color: #dee2e6;
    }
    body {
      background-color: #f4f6f9;
      font-family: 'Poppins', sans-serif;
    }
    .navbar {
      background-color: white;
      border-bottom: 3px solid var(--primary-orange);
      padding-top: 0.8rem;
      padding-bottom: 0.8rem;
    }
    .main-container {
        max-width: 1200px;
        margin: 0 auto;
    }
    .card {
      background-color: var(--light-bg);
      border: 1px solid var(--border-color);
      box-shadow: 0 4px 12px rgba(0,0,0,0.05);
    }
    .card-header {
        background-color: #f7f7f7;
        border-bottom: 1px solid var(--border-color);
        font-weight: 600;
        color: #343a40;
    }
    .btn-primary {
        background-color: var(--primary-orange);
        border-color: var(--primary-orange);
        font-weight: 500;
    }
    .btn-primary:hover {
        background-color: #e68a2e;
        border-color: #e68a2e;
    }
    .btn-secondary {
        background-color: var(--secondary-green);
        border-color: var(--secondary-green);
        font-weight: 500;
    }
     .btn-secondary:hover {
        background-color: #117a07;
        border-color: #117a07;
    }
    .form-label { font-weight: 500; }
    .main-header {
      background: linear-gradient(90deg, #ff9933, #e68a2e);
      color: white;
      text-shadow: 1px 1px 2px rgba(0,0,0,0.2);
    }
    .techtide-card {
      border: 1px solid #e0e0e0; 
      margin-bottom: 1.5rem;   
      width: 100%;             
      box-shadow: 0 2px 8px rgba(0,0,0,0.06);
    }
    /* --- NEW PAGE TRANSITION STYLES --- */
    .page {
        display: block;
        transition: opacity 0.4s ease-out, transform 0.4s ease-out;
    }
    .page.hidden {
        opacity: 0;
        transform: scale(0.98);
        display: none;
    }
  </style>
</head>
<body>

  <nav class="navbar navbar-light bg-light sticky-top shadow-sm">
    <div class="container main-container">
      <a class="navbar-brand d-flex align-items-center" href="#">
        <span class="fs-4 fw-bold text-dark">TECHTIDE</span>
      </a>
    </div>
  </nav>

  <header class="main-header p-4">
    <div class="container main-container">
        <h1 class="fw-bold">SMART AI FARMING ASSISTANT</h1>
        <p class="lead mb-0">An AI-powered guide for modern Indian farming.</p>
    </div>
  </header>

  <main class="container main-container my-4">
    
    <div id="page-input" class="page">
        <section class="card techtide-card mb-4">
          <div class="card-header">
            <h5 class="mb-0"><i class="bi bi-input-cursor-text me-2"></i>1. Enter Your Farm Details</h5>
          </div>
          <div class="card-body p-4">
            <div class="row g-4">
              <div class="col-md-6">
                <label for="lang" class="form-label">Language / भाषा</label>
                <select id="lang" class="form-select">
                  <option value="en">English</option>
                  <option value="hi" selected>Hindi (हिन्दी)</option>
                  <option value="gu">Gujarati (ગુજરાતી)</option>
                </select>
              </div>
              <div class="col-md-6">
                <label for="voiceToggle" class="form-label">Voice Assistant</label>
                <select id="voiceToggle" class="form-select">
                  <option value="voice">Voice: ON</option>
                  <option value="text">Voice: OFF</option>
                </select>
              </div>
              <div class="col-12">
                <label for="soil" class="form-label">Soil Type / मिट्टी का प्रकार</label>
                <select id="soil" class="form-select">
                  <option value="alluvial">Alluvial (जलोढ़)</option>
                  <option value="black">Black (काली)</option>
                  <option value="red">Red (लाल)</option>
                  <option value="laterite">Laterite (लैटेराइट)</option>
                  <option value="sandy">Sandy (रेतीली)</option>
                  <option value="loamy">Loamy (दोमट)</option>
                </select>
              </div>
              <div class="col-md-6">
                <label for="ph" class="form-label">Soil pH / मिट्टी का पीएच: <span id="phVal" class="fw-bold text-success">6.5</span></label>
                <input id="ph" type="range" class="form-range" min="3" max="9" step="0.1" value="6.5">
              </div>
              <div class="col-md-6">
                <label for="rainPref" class="form-label">Typical Rainfall / सामान्य वर्षा</label>
                <select id="rainPref" class="form-select">
                  <option value="low">Low / कम (<50mm)</option>
                  <option value="medium" selected>Medium / मध्यम (50-150mm)</option>
                  <option value="high">High / उच्च (>150mm)</option>
                </select>
              </div>
              <div class="col-12">
                <label for="location" class="form-label">Location / स्थान <span class="text-muted fw-normal"></span></label>
                <input id="location" class="form-control" placeholder="e.g., Ahmedabad or 23.03,72.58">
              </div>
               <div class="col-12">
                <label for="owmKey" class="form-label">OpenWeatherMap API Key <span class="text-muted fw-normal">(Optional for live weather)</span></label>
                <input id="owmKey" class="form-control" placeholder="Paste API key here for live forecast">
               </div>
            </div>
            <div class="d-flex gap-2 mt-4">
              <button class="btn btn-primary btn-lg flex-grow-1" id="recommendBtn"><i class="bi bi-lightbulb-fill me-2"></i>Get Crop Recommendation</button>
            </div>
          </div>
        </section>
    </div>
    
    <div id="page-results" class="page hidden">
        <button id="backBtn" class="btn btn-outline-secondary mb-3"><i class="bi bi-arrow-left me-2"></i>New Recommendation</button>
        <section class="card techtide-card mb-4">
            <div class="card-header">
                <h5 class="mb-0"><i class="bi bi-clipboard-data-fill me-2"></i>2. Recommendation & Actions</h5>
            </div>
            <div class="card-body p-4">
                <div class="alert alert-light" id="recOutput" style="white-space: pre-wrap;">No recommendation yet.</div>
                <div class="d-flex gap-2 mt-3">
                    <button class="btn btn-dark" id="saveBtn"><i class="bi bi-cloud-arrow-down-fill me-2"></i>Save to History</button>
                    <button class="btn btn-info text-dark" id="smsBtn"><i class="bi bi-phone-fill me-2"></i>Create SMS</button>
                    <button class="btn btn-secondary text-white ms-auto" id="chatBtn"><i class="bi bi-chat-dots-fill me-2"></i>Open Farmer Chatbot</button>
                </div>
            </div>
        </section>

        <section class="card techtide-card mb-4" id="chatCard" style="display:none">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0" id="chatTitle">Farmer Chatbot</h5>
                <button id="closeChat" class="btn-close"></button>
            </div>
            <div class="card-body p-4">
                <div id="chatWindow" class="border rounded p-3 mb-3" style="height: 250px; overflow-y: auto; background-color: #f8f9fa;"></div>
                <div class="input-group">
                    <input id="chatInput" type="text" class="form-control" placeholder="Ask by voice or text...">
                    <button id="micBtn" class="btn btn-outline-secondary"><i class="bi bi-mic-fill fs-5"></i></button>
                    <button id="sendBtn" class="btn btn-primary">Send</button>
                </div>
            </div>
        </section>

        <section class="card techtide-card">
            <div class="card-header">
                <h5 class="mb-0"><i class="bi bi-archive-fill me-2"></i>Offline History</h5>
            </div>
            <div class="card-body p-4">
                <div id="offlineList" class="mb-3"><small class="text-muted">No recommendations saved in history.</small></div>
                <button class="btn btn-outline-danger" id="clearSaved"><i class="bi bi-trash-fill me-2"></i>Clear All History</button>
            </div>
        </section>
    </div>
  </main>

  <footer class="container text-center text-muted py-4 mt-4">
    <p>&copy; 2025 A TECHTIDE INITIATIVE | Smart Farming Project</p>
  </footer>

  <script>
    /* =====================
        Utilities & i18n
        ===================== */
    const i18n = {
      en: { saved_msg: 'Saved to history!', defaultGreeting: 'Hello! Ask about crops, water, or schemes.' },
      hi: { saved_msg: 'इतिहास में सहेजा गया!', defaultGreeting: 'नमस्ते! फसल, पानी, या योजनाओं के बारे में पूछें।' },
      gu: { saved_msg: 'ઇતિહાસમાં સાચવ્યું!', defaultGreeting: 'નમસ્તે! પાક, પાણી અથવા યોજનાઓ વિશે પૂછો.' }
    };

    function recommendCrops({soil, ph, rainCategory, tempCategory}){
      const candidates = [];
      const soilMap = { alluvial: ['Wheat','Rice','Sugarcane'], black: ['Cotton','Soybean','Sugarcane'], red: ['Millets','Groundnut','Cotton'], laterite: ['Tea','Cashew','Rubber'], sandy: ['Groundnut','Pearl Millet','Potato'], loamy: ['Vegetables','Wheat','Rice'], };
      const soilList = soilMap[soil] || ['Maize','Millet'];
      const phPref = (p) => (p < 5.5 ? 'acidic' : (p <= 7.5 ? 'neutral' : 'alkaline'));
      const phType = phPref(ph);
      const rainEffect = { low: ['Drought-resistant Millet','Groundnut','Sorghum'], medium: ['Wheat','Maize','Soybean'], high: ['Rice','Sugarcane','Paddy'] };
      candidates.push(...soilList, ...rainEffect[rainCategory]);
      if(phType==='acidic') candidates.unshift('Rice'); else if(phType==='alkaline') candidates.unshift('Barley');
      if(tempCategory==='hot') candidates.unshift('Millets'); if(tempCategory==='cool') candidates.unshift('Wheat');
      return [...new Set(candidates)].slice(0,5);
    }
    
    function generateFarmingTips(lang, crops, soil){
        const tips = {
            en: { title: "🌱 Farming Growth Tips", plant: `Planting Time: For Kharif crops like ${crops[1]} or ${crops[0]}, aim to sow just before the monsoon season (June-July). For Rabi crops like Wheat, plant in cooler months (October-November).`, fertilizer: `Fertilizers: For ${soil} soil, a balanced NPK (Nitrogen, Phosphorus, Potassium) fertilizer is a good start. For crops like ${crops[0]}, consider organic manure to improve soil structure.`, test: "Soil Test: For precise nutrient needs, get a soil test from your nearest Krishi Vigyan Kendra (KVK). This will give you a detailed report and save money on fertilizers." },
            hi: { title: "🌱 कृषि विकास युक्तियाँ", plant: `बुवाई का समय: ${crops[1]} या ${crops[0]} जैसी खरीफ फसलों के लिए, मानसून से ठीक पहले (जून-जुलाई) बुवाई का लक्ष्य रखें। गेहूं जैसी रबी फसलों के लिए, ठंडे महीनों (अक्टूबर-नवंबर) में पौधे लगाएं।`, fertilizer: `उर्वरक: ${soil} मिट्टी के लिए, एक संतुलित एनपीके (नाइट्रोजन, फास्फोरस, पोटेशियम) उर्वरक एक अच्छी शुरुआत है। ${crops[0]} जैसी फसलों के लिए, मिट्टी की संरचना में सुधार के लिए जैविक खाद पर विचार करें।`, test: "मृदा परीक्षण: सटीक पोषक तत्वों की जरूरतों के लिए, अपने निकटतम कृषि विज्ञान केंद्र (केवीके) से मिट्टी का परीक्षण करवाएं। इससे आपको विस्तृत रिपोर्ट मिलेगी और उर्वरकों पर पैसा बचेगा।" },
            gu: { title: "🌱 ખેતી વૃદ્ધિ માટેની ટિપ્સ", plant: `વાવેતરનો સમય: ${crops[1]} અથવા ${crops[0]} જેવા ખરીફ પાકો માટે, ચોમાસા પહેલા (જૂન-જુલાઈ) વાવણી કરવાનું લક્ષ્ય રાખો। ઘઉં જેવા રવિ પાકો માટે, ઠંડા મહિનામાં (ઓક્ટોબર-નવેમ્બર) વાવેતર કરો।`, fertilizer: `ખાતરો: ${soil} માટી માટે, સંતુલિત NPK (નાઇટ્રોજન, ફોસ્ફરસ, પોટેશિયમ) ખાતર સારી શરૂઆત છે। ${crops[0]} જેવા પાકો માટે, માટીની રચના સુધારવા માટે જૈવિક ખાતરનો વિચાર કરો।`, test: "માટી પરીક્ષણ: પોષક તત્વોની ચોક્કસ જરૂરિયાતો માટે, તમારા નજીકના કૃષિ વિજ્ઞાન કેન્દ્ર (KVK) પરથી માટીનું પરીક્ષણ કરાવો। આ તમને વિગતવાર અહેવાલ આપશે અને ખાતરો પર નાણાં બચાવશે।" }
        };
        const l = tips[lang] || tips['en'];
        return `\n\n${l.title}\n--------------------\n1. ${l.plant}\n2. ${l.fertilizer}\n3. ${l.test}`;
    }
    
    function explainGovSchemes(lang){
        const schemes = {
            en: { title: "📜 Government Scheme Info: PM-KISAN", desc: "The Pradhan Mantri Kisan Samman Nidhi (PM-KISAN) is a central sector scheme with 100% funding from the Government of India.", benefits_title: "Benefits:", benefits: "- Financial benefit of ₹6,000 per year.\n- Paid in three equal 4-monthly installments of ₹2,000 each.", eligibility_title: "Eligibility:", eligibility: "- Must be an Indian citizen.\n- Small and marginal farmers with combined landholding/ownership of up to 2 hectares." },
            hi: { title: "📜 सरकारी योजना की जानकारी: पीएम-किसान", desc: "प्रधानमंत्री किसान सम्मान निधि (पीएम-किसान) भारत सरकार से 100% वित्त पोषण के साथ एक केंद्रीय क्षेत्र की योजना है।", benefits_title: "लाभ:", benefits: "- प्रति वर्ष ₹6,000 का আর্থিক लाभ।\n- ₹2,000 की तीन समान 4-मासिक किस्तों में भुगतान।", eligibility_title: "पात्रता:", eligibility: "- भारतीय नागरिक होना चाहिए।\n- 2 हेक्टेयर तक की संयुक्त भूमि/स्वामित्व वाले छोटे और सीमांत किसान।" },
            gu: { title: "📜 સરકારી યોજના માહિતી: પીએમ-કિસાન", desc: "પ્રધાનમંત્રી કિસાન સન્માન નિધિ (પીએમ-કિસાન) એ ભારત સરકાર દ્વારા 100% ભંડોળ સાથેની કેન્દ્રીય ક્ષેત્રની યોજના છે.", benefits_title: "લાભો:", benefits: "- વાર્ષિક ₹6,000 નો નાણાકીય લાભ.\n- ₹2,000 ના ત્રણ સમાન 4-માસિક હપ્તામાં ચૂકવવામાં આવે છે.", eligibility_title: "પાત્રતા:", eligibility: "- ભારતીય નાગરિક હોવો આવશ્યક છે.\n- 2 હેક્ટર સુધીની સંયુક્ત જમીન/માલિકી ધરાવતા નાના અને સીમાંત ખેડૂતો." }
        };
        const l = schemes[lang] || schemes['en'];
        return `\n\n${l.title}\n--------------------\n${l.desc}\n\n**${l.benefits_title}**\n${l.benefits}\n\n**${l.eligibility_title}**\n${l.eligibility}`;
    }

    function windDegToDir(deg) { const dirs = ["N","NNE","NE","ENE","E","ESE","SE","SSE","S","SSW","SW","WSW","W","WNW","NW","NNW"]; return dirs[Math.round(deg / 22.5) % 16]; }
    function getSunlightHours(sunrise, sunset){ const duration = (sunset - sunrise) / 3600; return `${Math.floor(duration)}h ${Math.round((duration % 1) * 60)}m`; }
    function t(lang,key){ return (i18n[lang] && i18n[lang][key]) || i18n['en'][key] || key; }

    /* =====================
        DOM + App logic
        ===================== */
    const allDOMElements = {
        pageInput: document.getElementById('page-input'), pageResults: document.getElementById('page-results'), backBtn: document.getElementById('backBtn'), langEl: document.getElementById('lang'), soilEl: document.getElementById('soil'), phEl: document.getElementById('ph'), phVal: document.getElementById('phVal'), rainEl: document.getElementById('rainPref'), locationEl: document.getElementById('location'), owmKeyEl: document.getElementById('owmKey'), recBtn: document.getElementById('recommendBtn'), recOutput: document.getElementById('recOutput'), saveBtn: document.getElementById('saveBtn'), smsBtn: document.getElementById('smsBtn'), chatBtn: document.getElementById('chatBtn'), chatCard: document.getElementById('chatCard'), chatWindow: document.getElementById('chatWindow'), chatInput: document.getElementById('chatInput'), sendBtn: document.getElementById('sendBtn'), micBtn: document.getElementById('micBtn'), closeChat: document.getElementById('closeChat'), chatTitle: document.getElementById('chatTitle'), offlineList: document.getElementById('offlineList'), clearSaved: document.getElementById('clearSaved')
    };
    
    let currentLang = allDOMElements.langEl.value, useVoice = true;
    let availableVoices = [];

    // --- Voice Synthesis Fix ---
    function populateVoiceList() {
      if(typeof speechSynthesis === 'undefined') return;
      availableVoices = speechSynthesis.getVoices();
    }
    populateVoiceList();
    if (typeof speechSynthesis !== 'undefined' && speechSynthesis.onvoiceschanged !== undefined) {
      speechSynthesis.onvoiceschanged = populateVoiceList;
    }

    function speak(text){
      if(!useVoice || !('speechSynthesis' in window)) return;
      const utter = new SpeechSynthesisUtterance(text);
      const targetLang = currentLang === 'hi' ? 'hi-IN' : (currentLang === 'gu' ? 'gu-IN' : 'en-GB');
      // Find a specific voice for the language, which improves quality
      const voice = availableVoices.find(v => v.lang === targetLang);
      if (voice) utter.voice = voice;
      utter.lang = targetLang;
      window.speechSynthesis.cancel();
      window.speechSynthesis.speak(utter);
    }

    function switchPage(pageToShow) {
        allDOMElements.pageInput.classList.toggle('hidden', pageToShow !== 'input');
        allDOMElements.pageResults.classList.toggle('hidden', pageToShow !== 'results');
        window.scrollTo(0, 0);
    }
    
    allDOMElements.phEl.addEventListener('input',()=>{allDOMElements.phVal.textContent = allDOMElements.phEl.value});
    allDOMElements.langEl.addEventListener('change',(e)=>{currentLang = e.target.value; updateChatTitle()});
    document.getElementById('voiceToggle').addEventListener('change',(e)=>{useVoice = e.target.value==='voice'});
    allDOMElements.backBtn.addEventListener('click', () => switchPage('input'));

    function updateChatTitle(){
      const titles = { hi: 'किसान चैटबॉट', gu: 'ખેડૂત ચેટબોટ', en: 'Farmer Chatbot' };
      allDOMElements.chatTitle.textContent = titles[currentLang] || titles['en'];
    }

    function escapeHtml(s){return s.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;')}

    function chatbotReply(text){
      const q = text.toLowerCase();
      if(q.includes('crop') || q.includes('फसल') || q.includes('પાક')){
        const { soilEl, phEl, rainEl } = allDOMElements;
        const rec = recommendCrops({soil: soilEl.value, ph: parseFloat(phEl.value), rainCategory: rainEl.value, tempCategory: 'mild'});
        return { en: `For ${soilEl.value} soil, try: ${rec.join(', ')}.`, hi: `${soilEl.value} मिट्टी के लिए, कोशिश करें: ${rec.join(', ')}.`, gu: `${soilEl.value} માટી માટે, પ્રયાસ કરો: ${rec.join(', ')}.`}[currentLang];
      }
      if(q.includes('scheme')||q.includes('योजना')||q.includes('યોજના')){ return {en: 'PM-KISAN gives ₹6,000/year to small farmers. Check your eligibility at the nearest CSC.', hi: 'पीएम-किसान छोटे किसानों को ₹6,000/वर्ष देती है। नजदीकी सीएससी पर अपनी पात्रता जांचें।', gu: 'પીએમ-કિસાન નાના ખેડૂતોને વાર્ષિક ₹6,000 આપે છે. નજીકના CSC પર તમારી યોગ્યતા તપાસો.'}[currentLang]; }
      return {en: 'Sorry, I did not understand.', hi: 'माफ़ कीजिए, मैं समझ नहीं पाया।', gu: 'માફ કરશો, હું સમજી શક્યો નહીં.'}[currentLang];
    }

    allDOMElements.recBtn.addEventListener('click',async ()=>{
      allDOMElements.recBtn.textContent = 'Calculating...';
      const { soilEl, phEl, rainEl, locationEl, owmKeyEl } = allDOMElements;
      const soil = soilEl.value, ph = parseFloat(phEl.value), rainPref = rainEl.value, loc = locationEl.value.trim(), apiKey = owmKeyEl.value.trim();

      let weather = {tempAvg: 28, rainProb: 0.3, windSpeed: 3, windDir: 'SW', sunlight: '11h 30m' };
      if(apiKey && loc){
        try{
          let url = loc.includes(',') ? `https://api.openweathermap.org/data/2.5/weather?lat=${loc.split(',')[0].trim()}&lon=${loc.split(',')[1].trim()}&units=metric&appid=${apiKey}` : `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(loc)}&units=metric&appid=${apiKey}`;
          const res = await fetch(url);
          if(!res.ok) throw new Error('Weather fetch failed');
          const j = await res.json();
          weather = {tempAvg: j.main.temp, rainProb: j.rain ? 0.8 : 0.2, windSpeed: j.wind.speed, windDir: windDegToDir(j.wind.deg), sunlight: getSunlightHours(j.sys.sunrise, j.sys.sunset) };
        } catch(e){ console.warn('OWM failed, using defaults',e); }
      }

      const tempCategory = weather.tempAvg > 27 ? 'hot' : (weather.tempAvg < 20 ? 'cool' : 'mild');
      const crops = recommendCrops({soil,ph,rainCategory:rainPref,tempCategory});

      const messages = {
          en: `--- Weather & Soil Report ---\nLocation: ${loc || 'N/A'}\nSoil: ${soil} (pH ${ph})\n\n--- Forecast ---\n🌡️ Est. Temp: ${weather.tempAvg.toFixed(1)}°C\n☀️ Sunlight: ${weather.sunlight}\n💨 Wind: ${weather.windSpeed.toFixed(1)} m/s (${weather.windDir})\n\n--- Recommendations ---\nTop Crop Suggestions: ${crops.join(', ')}`,
          hi: `--- मौसम और मिट्टी की रिपोर्ट ---\nस्थान: ${loc || 'N/A'}\nमिट्टी: ${soil} (pH ${ph})\n\n--- पूर्वानुमान ---\n🌡️ अनुमानित तापमान: ${weather.tempAvg.toFixed(1)}°C\n☀️ धूप: ${weather.sunlight}\n💨 हवा: ${weather.windSpeed.toFixed(1)} m/s (${weather.windDir})\n\n--- सिफारिशें ---\nशीर्ष फसल सुझाव: ${crops.join(', ')}`,
          gu: `--- હવામાન અને જમીનનો અહેવાલ ---\nસ્થાન: ${loc || 'N/A'}\nજમીન: ${soil} (pH ${ph})\n\n--- આગાહી ---\n🌡️ અંદાજિત તાપમાન: ${weather.tempAvg.toFixed(1)}°C\n☀️ સૂર્યપ્રકાશ: ${weather.sunlight}\n💨 પવન: ${weather.windSpeed.toFixed(1)} m/s (${weather.windDir})\n\n--- ભલામણો ---\nટોચના પાક સૂચનો: ${crops.join(', ')}`
      };
      
      let message = messages[currentLang] || messages['en'];
      message += generateFarmingTips(currentLang, crops, soil);
      message += explainGovSchemes(currentLang);

      allDOMElements.recOutput.textContent = message;
      speak(message.substring(0, 300));
      window._lastRecommendation = {when:new Date().toISOString(),loc,soil,ph,weather,crops,message};
      allDOMElements.recBtn.textContent = 'Get Crop Recommendation';
      switchPage('results');
    });

    // --- History / Offline Logic (MODIFIED) ---
    const historyKey = 'smartfarm_history';
    function getHistory() { return JSON.parse(localStorage.getItem(historyKey)) || []; }
    function saveHistory(history) { localStorage.setItem(historyKey, JSON.stringify(history)); }

    allDOMElements.saveBtn.addEventListener('click',()=>{
      if(window._lastRecommendation){
        const history = getHistory();
        history.unshift(window._lastRecommendation); // Add to beginning of array
        saveHistory(history.slice(0, 10)); // Keep max 10 records
        alert(t(currentLang,'saved_msg'));
        refreshOfflineList();
      } else alert('No recommendation to save.');
    });

    function refreshOfflineList(){
      const history = getHistory();
      const { offlineList } = allDOMElements;
      if(history.length === 0){
        offlineList.innerHTML = '<small class="text-muted">No recommendations saved in history.</small>'; return;
      }
      offlineList.innerHTML = history.map((item, index) => `
        <div class="p-2 border rounded bg-light mb-2">
            <div class="d-flex justify-content-between align-items-center">
                <small><strong>Saved:</strong> ${new Date(item.when).toLocaleString()}</small>
                <button class="btn btn-sm btn-outline-success load-btn" data-index="${index}">Load</button>
            </div>
            <div class="mt-2" style="white-space: pre-wrap; font-size: 0.9em;">${escapeHtml(item.message.substring(0, 150))}...</div>
        </div>
      `).join('');
    }
    
    allDOMElements.offlineList.addEventListener('click', (e) => {
        if (e.target.classList.contains('load-btn')) {
            const index = e.target.getAttribute('data-index');
            const history = getHistory();
            const item = history[index];
            if (item) {
                allDOMElements.recOutput.textContent = item.message;
                speak(item.message.substring(0, 300));
                window._lastRecommendation = item;
            }
        }
    });

    allDOMElements.clearSaved.addEventListener('click',()=>{ localStorage.removeItem(historyKey); refreshOfflineList(); alert('History Cleared'); });

    // --- Chatbot Logic ---
    let recognition;
    if('webkitSpeechRecognition' in window || 'SpeechRecognition' in window){
      const SR = window.SpeechRecognition || window.webkitSpeechRecognition;
      recognition = new SR();
      recognition.continuous = false;
      recognition.onresult = (e)=>{ allDOMElements.chatInput.value = e.results[0][0].transcript; handleChatSend(); }
      recognition.onerror = (e)=>{ console.warn('Speech error', e); }
    } else { allDOMElements.micBtn.disabled = true; }

    allDOMElements.micBtn.addEventListener('click',()=>{
      if(!recognition){return}
      recognition.lang = currentLang === 'hi' ? 'hi-IN' : (currentLang === 'gu' ? 'gu-IN' : 'en-US');
      try{recognition.start();}catch(e){}
    });
    
    function appendChat(who, text){
        const { chatWindow } = allDOMElements;
        const div = document.createElement('div');
        div.className = `text-${who === 'Bot' ? 'start' : 'end'} mb-2`;
        div.innerHTML = `<span class="d-inline-block p-2 rounded ${who === 'Bot' ? 'bg-light text-dark' : 'bg-primary text-white'}">${escapeHtml(text)}</span>`;
        chatWindow.appendChild(div);
        chatWindow.scrollTop = chatWindow.scrollHeight;
    }

    function handleChatSend(){
      const text = allDOMElements.chatInput.value.trim(); if(!text) return;
      appendChat('You', text);
      allDOMElements.chatInput.value='';
      const reply = chatbotReply(text);
      setTimeout(()=>{appendChat('Bot', reply); speak(reply);},400);
    }
    allDOMElements.sendBtn.addEventListener('click',handleChatSend);
    allDOMElements.chatInput.addEventListener('keypress',(e)=>{if(e.key==='Enter') handleChatSend();});
    allDOMElements.chatBtn.addEventListener('click',()=>{allDOMElements.chatCard.style.display='block'; if(allDOMElements.chatWindow.children.length === 0) { appendChat('Bot', t(currentLang,'defaultGreeting')); speak(t(currentLang,'defaultGreeting')); } });
    allDOMElements.closeChat.addEventListener('click',()=>{allDOMElements.chatCard.style.display='none'});
    
    // --- Initial Load ---
    (function init(){
      const savedLang = localStorage.getItem('smartfarm_lang');
      if(savedLang){allDOMElements.langEl.value = savedLang; currentLang = savedLang; updateChatTitle();}
      allDOMElements.langEl.addEventListener('change',()=>{localStorage.setItem('smartfarm_lang', allDOMElements.langEl.value)});
      refreshOfflineList();
      updateChatTitle();
    })();
  </script>
</body>
</html>
